# NOTE: this file is managed by puppet
#

import std;

#Import file with probe definitions
include "includes/probes.vcl";

#Import file with backend definitions
include "includes/backends.vcl";

#Import file with director definitions;
include "includes/directors.vcl";

#Import file with acl definitions
include "includes/acls.vcl";

sub vcl_recv {

<%- if @defaultgrace -%>
  # Default grace period
  set req.grace = <%= @defaultgrace %>;
<%- end -%>
<%- if @logrealip -%> 
  if (req.http.X-Forwarded-For) {
     std.log("RealIP:" + req.http.X-Forwarded-For); 
  } else {
     std.log("RealIP:" + client.ip); 
  }
<%- end -%>

<%- if @https_redirect -%>
  # Redirect to https if coming over http according to X-Forwarded-Proto
  if ( req.http.X-Forwarded-Proto && req.http.X-Forwarded-Proto !~ "(?i)https" && req.url !~ "no-ssl-rewrite" ) {

    #Find what to use for hostname, either Host: or the server's ip
    if (req.http.host) {
        set req.http.x-redir-host = req.http.host;
    } else {
        set req.http.x-redir-host = server.ip;
    }

    set req.http.x-redir-url = "https://" + req.http.x-redir-host + req.url;

    error 750 req.http.x-redir-url;
  }
<%- end -%>

<%- if not @cond_requests -%>
  unset req.http.If-Modified-Since;
  unset req.http.If-None-Match;
<%- end -%>

  # cookie sanitization
  if (req.http.Cookie) {

     set req.http.Cookie = ";"+req.http.Cookie;
     set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
     set req.http.Cookie = regsuball(req.http.Cookie, ";(<%- @cookiekeeps.each do |cookie| -%><%= cookie %><%- if cookie != @cookiekeeps[-1] -%>|<%-end-%><%-end-%>)=", "; \1=");
     set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
     set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
    if (req.http.Cookie == "") {
      remove req.http.Cookie;
    }
  }

<%- if $drop_stat_cookies -%>
  if (
     # Static file cache
     ((req.url ~ "(?i)\.(jpg|jpeg|gif|png|tiff|tif|svg|swf|ico|css|kss|js|vsd|doc|ppt|pps|xls|pdf|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm|jar|class|flv|exe)$")||
     # Plone images cache
     (req.url ~ "(?i)(image|imagem_large|image_preview|image_mini|image_thumb|image_tile|image_icon|imagem_listing)$")) && 
     # Plone resource editor
     (req.url !~ "(?i)\@\@plone\.resourceeditor\.getfile\?path\=")
     ) {
     remove req.http.Cookie;
  }
<%- end -%>

  <%- if @blockedips.length > 0 -%>
  # blocked list
  if ((client.ip ~ blockedips)<%- if @blockedbots.length > 0 -%>||(req.http.User-Agent ~ "(?i)<%- @blockedbots.each do |bot| -%><%= bot %><%- if cookie != @blockedbots[-1] -%>|<%-end-%><%-end-%>")<%-end-%>) {
      error 403 "Access forbidden.";
  }
  <%- end -%>

  <%- if @enable_waf -%>
  # Web Application Firewall
  # These rules are defined by a number between semicolons. Example: ;48;
  # All expections must be defined at the req.http.EXCE variable
  # DO NOT MODIFY waf.vcl FILE!
  
  set req.http.EXCE = ";<%- @wafexceptions.each do |exce| -%><%= exce %>;<%-end-%>";
  set req.http.RULE = "";

  include "includes/waf.vcl";
  if (!(req.http.RULE == "")) {
    std.log( "ATTACK SIGNATURE rules:"+req.http.RULE+" url:"+req.url+" COOKIE:"+req.http.Cookie+"   IP:"+client.ip);
    error 403 "ATTACK DETECTED - IP LOGGED";
  }
  remove req.http.EXCE;
  remove req.http.RULE;
  <%- end -%>

  # backend selection logic
  include "includes/backendselection.vcl";

  <%- if @purgeips.length > 0 -%>
  # Allows purge for the IPs in purge ACL
  if (req.request == "PURGE") {
    if (!(client.ip ~ purge)) {
        error 405 "Not allowed.";
    }
    ban(" req.url == " + req.url);
    set req.url = regsuball(req.url,"80","443"); 
    set req.url = regsuball(req.url,"http","https");
    ban(" req.url == " + req.url);
    # Throw a synthetic page so the
    # request won't go to the backend.
    error 200 "Added ban.";      
  }
  <%- end -%>

  <%- if @pipe_uploads -%>
  /* Pipe chunked or multipart uploads to avoid timeout */
  if ((req.request == "POST" || req.request == "PUT") && (req.http.transfer-encoding ~ "chunked" || req.http.Content-Type ~ "multipart/form-data")) {
    return(pipe);
  }
  <%- end %>

  if (req.request != "GET" &&
      req.request != "HEAD" &&
      req.request != "PUT" &&
      req.request != "POST" &&
      req.request != "TRACE" &&
      req.request != "OPTIONS" &&
      req.request != "DELETE") {
     /* Non-RFC2616 or CONNECT which is weird. */
     return (pipe);
  }


}

sub vcl_hash {
  <%- if @x_forwarded_proto -%>
  if (req.http.X-Forwarded-Proto) {
    hash_data(req.http.X-Forwarded-Proto);
  }
  <%- end -%>
}


sub vcl_pipe {
  set req.http.Connection = "close";  
  return (pipe);
}

sub vcl_hit {
   std.log( "CACHE-DEBUG URL:"+req.url+" COOKIE:"+req.http.Cookie+" AVISO:HIT IP:"+client.ip);
   if (req.request == "PURGE") {
      purge;
      error 200 "Purged.";
   }
}

sub vcl_miss {
    std.log( "CACHE-DEBUG URL:"+req.url+" COOKIE:"+req.http.Cookie+" AVISO:MISS IP:"+client.ip);
    if (req.request == "PURGE") {
       purge;
       error 200 "Purged.";
    }
}

sub vcl_pass {
   std.log( "CACHE-DEBUG URL:"+req.url+" COOKIE:"+req.http.Cookie+" AVISO:PASS IP:"+client.ip);
}

sub vcl_fetch {

<%- if @defaultgrace -%>
  # Default grace period
  set req.grace = <%= @defaultgrace %>;
<%- end -%>
  
  if (beresp.http.content-type ~ "<%- @gziptypes.each do |type| -%>^<%= type %><%- if type != @gziptypes[-1] -%>|<%-end-%><%-end-%>") {
     set beresp.do_gzip = true;
  }
 
  # Remove I18N_LANGUAGE Set-Cookie 
  if (beresp.http.Set-Cookie ~ "I18N_LANGUAGE") {
    remove beresp.http.Set-Cookie;
  }

  <%- if @honor_backend_ttl -%>
  # If no explicit TTL was set by the backend
  if (beresp.ttl < 0s) {
  <%- end -%>
    # Default minimum cache period
    if(!(req.http.Cookie)&&!(beresp.http.Set-Cookie)&&(req.request == "GET")) {
       set beresp.ttl = <%= @min_cache_time %>;
    }

    if (
       # Static file cache
       (req.url ~ "(?i)\.(jpg|jpeg|gif|png|tiff|tif|svg|swf|ico|css|kss|js|vsd|doc|ppt|pps|xls|pdf|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm|jar|class|flv|exe)$")||
       # Plone images cache
       (req.url ~ "(?i)(image|imagem_large|image_preview|image_mini|image_thumb|image_tile|image_icon|imagem_listing)$")
    ) {
      set beresp.ttl = <%= @static_cache_time %>;
      remove beresp.http.Set-Cookie;
    }

    #Avoid cache of objects > 100M
    if ( beresp.http.Content-Length ~ "[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]" ) {
      set beresp.ttl = <%= @static_cache_time %>;
      return (hit_for_pass);
    }
 
  <%- if @honor_backend_ttl -%>
  }
  <%- end -%>
}

sub vcl_deliver {
     if (obj.hits > 0) {
         set resp.http.X-Cache = "HIT";
     } else {
         set resp.http.X-Cache = "MISS";
     }
}

sub vcl_error {
     
     ## Moved Permanently
     if (obj.status == 750) {
        set obj.http.Location = obj.response;
        set obj.status = 301;
        return(deliver);
     }

     set obj.http.Content-Type = "text/html; charset=utf-8";
     set obj.http.Retry-After = "5";
     synthetic {"
 <?xml version="1.0" encoding="utf-8"?>
 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html>
   <head>
     <title>"} + obj.status + " " + obj.response + {"</title>
   </head>
   <body>
     <h1>Error "} + obj.status + " " + obj.response + {"</h1>
     <p>"} + obj.response + {"</p>
     <h3>Guru Meditation:</h3>
     <p>XID: "} + req.xid + {"</p>
     <hr>
    <p>Varnish cache server</p>
   </body>
 </html>
 "};
     return (deliver);
}
# 
# sub vcl_init {
# 	return (ok);
# }
# 
# sub vcl_fini {
# 	return (ok);
# }
